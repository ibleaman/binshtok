var validWords = [];
var letters = "";
var discoveredWords = [];
var totalScore = 0;
var pangram = getCookie("pangram");
var centerLetter = "";
var numFound = 0;
var maxscore = 0;
var mobile = false;

//makes http request to an awi api endpoint that triggers a lambda function to return today's letters/words
//today's words and letters are generated by a lambda function from the valid_words.json dictionary 
function get_valid_words(){

    const url='https://raw.githubusercontent.com/ibleaman/leksagon/master/puzzle.json';
	
	//check for mobile
	if (mobileAndTabletCheck()) mobile = true;
	
    var request = new XMLHttpRequest();
    request.open('GET', url, true);
    request.setRequestHeader("Content-type", "text/plain");
    request.onreadystatechange = function(){
      try {
        var puzzles = JSON.parse(this.response);
        var most_recent_puzzle_date = Object.keys(puzzles).sort().reverse()[0];
        
        // did user specify a date? else, get most recent puzzle
        queryString = window.location.search;
        const urlParams = new URLSearchParams(queryString);
        const date = urlParams.get('date');
        
        if (date !== null && puzzles.hasOwnProperty(date)) {
          var data = puzzles[date];
        } else {
          var data = puzzles[most_recent_puzzle_date];
        }
        
        //3 is LOADING, 4 is DONE
        if (request.readyState == 3 && request.status == 200){
          // console.log(data);
          letters = data['letters'];
          validWords = data['possible_words'];
          if (pangram != data['pangram']) {
            pangram = data['pangram'];
            setCookie("pangram", pangram, 365);
            setCookie("discoveredwords", JSON.stringify([]), 365);
            setCookie("totalscore", 0, 365);
            setCookie("numfound", 0, 365);
          } else {
            discoveredWords = getCookie("discoveredwords");
            if (discoveredWords != "") {
              discoveredWords = JSON.parse(discoveredWords);
            } else {
              discoveredWords = [];
            }
            totalScore = getCookie("totalscore");
            if (totalScore != "") {
              totalScore = parseInt(totalScore);
            } else {
              totalScore = 0;
            }
            numFound = getCookie("numfound");
            if (numFound != "") {
              numFound = parseInt(numFound);
            } else {
              numFound = 0;
            }
          }
          maxscore = data['maxscore'];
          initialize_letters();
          initialize_score();
          // console.log(validWords);

        }
      } 
      catch (e){
        console.log('error')
      };
    };
    request.send();
}

//function to check for mobile user
window.mobileAndTabletCheck = function() {
  let check = false;
  (function(a){if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);
  return check;
};

//function to blur inputbox if on mobile
function mobileBlur() {
	if (mobile) document.getElementById("testword").blur();
}

//function to set focus on inputbox if not on mobile
setInterval(function(){
 var focusbox;
 focusbox = document.getElementById("testword");
 if (!mobile) focusbox.focus();
});

function initialize_score(){
  document.getElementById("maxscore").innerHTML = String(maxscore);
  
  if (numFound > 0) {
    document.getElementById("numfound").innerHTML = numFound;
    showDiscoveredWord('');
  }
  if (totalScore > 0) {
    document.getElementById("score").innerHTML = totalScore;
  }
}
//Creates the hexagon grid of 7 letters with middle letter as special color
function initialize_letters(){
    
    var hexgrid = document.getElementById('hexGrid');
    for(var i=0; i<letters.length; i++){
        var char = letters[i];
        
        var pElement = document.createElement("P");
        pElement.innerHTML = char;
        
        var aElement = document.createElement("A");
        aElement.className = "hexLink";
        aElement.href = "#";
        aElement.appendChild(pElement);
        aElement.addEventListener('click', clickLetter(char), false);

        var divElement = document.createElement('DIV');
        divElement.className = "hexIn"; 
        divElement.appendChild(aElement);
        
        var hexElement = document.createElement("LI");
        hexElement.className = "hex";
        hexElement.appendChild(divElement);
        if(i==3){
          aElement.id = "center-letter";
          centerLetter = letters[i];
        }
        hexgrid.appendChild(hexElement);
    }
}

Array.prototype.shuffle = function() {
  let input = this;
  for (let i = input.length-1; i >=0; i--) {
    let randomIndex = Math.floor(Math.random()*(i+1)); 
    let itemAtIndex = input[randomIndex]; 
    input[randomIndex] = input[i]; 
    input[i] = itemAtIndex;
  }
  return input;
}

function shuffleLetters() {
    letters.shuffle();
    //get center letter back to letter[3]
    var centerIndex = letters.indexOf(centerLetter);
    if(letters[3] != centerLetter) {
        var temp = letters[3];
        letters[3] = centerLetter;
        letters[centerIndex] = temp;
    }
    var hexgrid = document.getElementById('hexGrid');
    while (hexgrid.firstChild) {
      hexgrid.removeChild(hexgrid.firstChild);
    }
    initialize_letters();

    /*
    //fill in shuffled letters into hex grid 
    for(var i=0; i<letters.length; i++) {
        var char = letters[i];
        var hexLetterElement = document.getElementsByClassName("hexLink");
        hexLetterElement[i].removeChild(hexLetterElement[i].firstChild);

        var pElement = document.createElement("P");
        pElement.innerHTML = char;
        hexLetterElement[i].appendChild(pElement); 
    }*/
}

//Validate whether letter typed into input box was from one of 7 available letters
// document.getElementById("testword").addEventListener("keydown", function(event){
//     if(!letters.includes(event.key.toUpperCase())){
//         alert('Invalid Letter Typed')
//         event.preventDefault();
//     }
//   }
//   )

//When letter is clicked add it to input box
var clickLetter = function(letter){
  return function curried_func(e){
    var tryword = document.getElementById("testword");
    document.getElementById('testword').value = document.getElementById('testword').value + letter.toLowerCase();
    overwriteInput(document.getElementById('testword'));
  }
}

//Deletes the last letter of the string in the textbox
function deleteLetter(){
  var tryword = document.getElementById("testword");
  var trywordTrimmed = tryword.value.substring(0, tryword.value.length-1);
  tryword.value = trywordTrimmed;
}

function wrongInput(selector){
  $(selector).fadeIn(1000);
  $(selector).fadeOut(500);
  $( "#testword" ).effect("shake", {times:2.5}, 450, function(){
      clearInput();
    } );

}

function rightInput(selector){
  $(selector).fadeIn(1500).delay(500).fadeOut(1500);
  
  clearInput();
}

function clearInput(){
  document.getElementById('testword').value = '';
}

function showPoints(pts){
  $(".points").html("+" + pts);

}
//check if the word is valid and clear the input box
//word must be at least 4 letters
//word must contain center letter
//word can't already be found 
function submitWord(){
  var tryword = document.getElementById('testword');
  var centerLetter = document.getElementById('center-letter').firstChild.innerHTML;

  let score = 0;
  var isPangram = false;
  var showScore = document.getElementById("totalScore");
  
  var tryword_fixed = replaceWithPrecombined(tryword.value);
  
  if(tryword_fixed.length < 4){ 
    wrongInput("#too-short");
  }else if(discoveredWords.includes(tryword_fixed.toLowerCase())){
    wrongInput("#already-found");
  }else if(!tryword_fixed.toLowerCase().includes(centerLetter.toLowerCase())){
    wrongInput("#miss-center");

  }else if(validWords.includes(tryword_fixed.toLowerCase())){

    var isPangram = checkPangram(tryword_fixed);
    score = calculateWordScore(tryword_fixed, isPangram);
    addToTotalScore(score);
    console.log("totalscore: " + totalScore);
    
    showDiscoveredWord(tryword_fixed);
    var discoveredWordsAsJSONString = JSON.stringify(discoveredWords);
    setCookie("discoveredwords", discoveredWordsAsJSONString, 365);
    numFound++;
    setCookie("numfound", numFound, 365);
    document.getElementById("numfound").innerHTML = numFound;
    document.getElementById("score").innerHTML = totalScore;
    setCookie("totalscore", totalScore, 365);

    var l = tryword_fixed.length;
    if(isPangram){
      rightInput("#pangram");
      showPoints(l + 7);
    }else if(l < 5){
      rightInput("#good");
      showPoints(1);
    }else if(l<7){
      rightInput("#great");
      showPoints(l);
    }else{
      rightInput("#amazing");
      showPoints(l);
    }

  }else{
    wrongInput("#invalid-word");
  }
}

//if word was valid, display it 
//if all words are found end game.
function showDiscoveredWord(input){
    
    var discText = document.getElementById("discoveredText");
    if(input != "") {
      discoveredWords.push(input.toLowerCase());
      discoveredWords.sort(function(a, b) {
          return translate(a, "אאַאָבבֿגדהווּװױזחטייִײײַכּכךלמםנןסעפּפֿףצץקרששׂתּת").localeCompare(translate(b, "אאַאָבבֿגדהווּװױזחטייִײײַכּכךלמםנןסעפּפֿףצץקרששׂתּת"));//custom alphabetical order
      });
    }
    while(discText.firstChild){
      discText.removeChild(discText.firstChild);
    }

    var numFound = discoveredWords.length; 
    var numCol = Math.ceil(numFound/6);
    var w = 0; 
    for(var c=0; c<numCol; c++){
      var list = document.createElement("UL");
      list.id= "discovered-words"+c;
      list.style.cssText = "padding:5px 10px; font-weight:100; ";
      discText.appendChild(list);
      var n = 6; 
      if(c == numCol-1){
        if(numFound%6 ==0){
          if(numFound==0){
            n = 0
          }
          else{
            n=6;
          }
        }else{
        n = numFound%6;}
      }
      for(var i=0; i<n; i++){
        var listword = document.createElement("LI");
        var pword = document.createElement("P");
        pword.innerHTML = replaceNonfinalForms(discoveredWords[w]); 
        listword.appendChild(pword);
        list.appendChild(listword);
        w++;
      }
    }
    if (numFound == validWords.length){
      alert("מזל־טובֿ! דו האָסט אַנטדעקט אַלע מעגלעכע װערטער! אַ דאַנק פֿאַרן שפּילן.");
    }
}

//adds input "score" to the total score of user
function addToTotalScore(score) {
  totalScore += score;
}

//calculates the score of input "input" and also adjusts if "input" is a pangram 
function calculateWordScore(input, isPangram) {
  
  let len = input.length;
  let returnScore = 1; 
  if(len > 4) {
    if(isPangram) {
      returnScore = len + 7;
      
    }else{
      returnScore = len;
    }
  }
  console.log('score ' + returnScore)
  return returnScore;
}

//checks if "input" word is a pangram
function checkPangram(input) {
  
  var i;
  var containsCount = 0;
  var containsAllLetters = false;
  for(i = 0; i < 7; i++) {
    if(input.includes(letters[i])) {
      containsCount++;
    }
  }
  if(containsCount == 7) {
    containsAllLetters = true;
  }
  console.log("isPangram?: " + containsAllLetters);
  return containsAllLetters;
  
  // console.log(input.value);
  // if(input==pangram){
  //  return true;
  // }
 return false;
}

function checkIncorrectLetters(input) {
  var i;
  var badLetterCount = 0;
  for(i = 0; i < input.length; i++) {
    if(!letters.includes(input[i])) {
      badLetterCount++;
    }
  }
  if(badLetterCount > 0) {
    return true;
  }
  return false;
}

function pressEnter() {
  if(event.keyCode == 13) {
    submitWord();
  }
  //if(event.keyCode == 8) {
  //  deleteLetter();
  //}
}

function replaceAll(str, find, replace) {
  return str.replace(new RegExp(find, 'g'), replace);
}

function replaceNonfinalForms(word) {
  var final_forms = {
    "כ$": "ך",
    "מ$": "ם",
    "נ$": "ן",
    "פֿ$": "ף",
    "צ$": "ץ",
    "ך(?!$)": "כ",
    "ם(?!$)": "מ",
    "ן(?!$)": "נ",
    "ף(?!$)": "פֿ",
    "ץ(?!$)": "צ",
    "^ך": "כ",
    "^ם": "מ",
    "^ן": "נ",
    "^ף": "פֿ",
    "^ץ": "צ"
  };
  for (var form in final_forms) {
    word = word.replace(new RegExp(form), final_forms[form]);
  }
  return word;
}

function replaceWithPrecombined(word) {
  var replacements = {
    "וּ": "וּ",
    "יִ": "יִ",
    "ײַ": "ײַ",
    "ייַ": "ײַ",
    "וו": "װ",
    "וי": "ױ",
    "יי": "ײ",
    "אַ": "אַ",
    "אָ": "אָ",
    "פּ": "פּ",
    "פֿ": "פֿ",
    "בֿ": "בֿ",
    "תּ": "תּ",
    "שׂ": "שׂ",
    "כּ": "כּ",
    "בּ": "ב",
    "ך": "כ",
    "ם": "מ",
    "ן": "נ",
    "ף": "פֿ",
    "ץ": "צ"
  };
  for (var letter_decomposed in replacements) {
    word = replaceAll(word, letter_decomposed, replacements[letter_decomposed]);
  }
  return word;
}

function overwriteInput(input) {
  let val = input.value;
  var replacements = {
    "וּ": "וּ",
    "יִ": "יִ",
    "ײַ": "ײַ",
    "ייַ": "ײַ",
    "וו": "װ",
    "וי": "ױ",
    "יי": "ײ",
    "אַ": "אַ",
    "אָ": "אָ",
    "פּ": "פּ",
    "פֿ": "פֿ",
    "בֿ": "בֿ",
    "תּ": "תּ",
    "שׂ": "שׂ",
    "כּ": "כּ",
    "בּ": "ב",
  };
  for (var letter_decomposed in replacements) {
    val = replaceAll(val, letter_decomposed, replacements[letter_decomposed]);
  }
  val = replaceNonfinalForms(val);
  //val = removeInvalidLetters(val);
  input.value = val;
}

function removeInvalidLetters(word) {
  var output = '';
  var user_letters = word.split('');
  var valid_letters = letters.join('').split('');
  if (valid_letters.includes('כ')) {
    valid_letters.push('ך');
  }
  if (valid_letters.includes('מ')) {
    valid_letters.push('ם');
  }
  if (valid_letters.includes('נ')) {
    valid_letters.push('ן');
  }
  if (valid_letters.includes('פֿ')) {
    valid_letters.push('ף');
  }
  if (valid_letters.includes('צ')) {
    valid_letters.push('ץ');
  }

  for (let i = 0; i < user_letters.length; i++) {
    if (valid_letters.includes(user_letters[i])) {
      output += user_letters[i];
    } else {
      $( "#testword" ).effect("shake", {times:2.5}, 450);
    }
  }
  return output;
}

// custom alphabetical order
// from: https://stackoverflow.com/questions/28711653/sorting-string-function-by-custom-alphabet-javascript
function translate(str, alphabet) {
    var abc = "אאַאָבבֿגדהווּװױזחטייִײײַכּכךלמםנןסעפּפֿףצץקרששׂתּת";
    return [].map.call(str, function(c) {
        return alphabet[abc.indexOf(c)] || c;
    }).join("");
}

function setCookie(cname, cvalue, exdays) {
  const d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  let expires = "expires="+ d.toUTCString();
  document.cookie = cname + "=" + encodeURIComponent(cvalue) + ";" + expires + ";path=/";
}

function getCookie(cname) {
  let name = cname + "=";
  let ca = document.cookie.split(';');
  for(let i = 0; i < ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return decodeURIComponent(c.substring(name.length, c.length));
    }
  }
  return "";
}